// Code generated by dagger-compiler.  Do not edit.
package org.pawelszymczyk;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class MainModule$$ModuleAdapter extends ModuleAdapter<MainModule> {
  private static final String[] INJECTS = { "members/org.pawelszymczyk.UserService", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public MainModule$$ModuleAdapter() {
    super(org.pawelszymczyk.MainModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public MainModule newModule() {
    return new org.pawelszymczyk.MainModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, MainModule module) {
    bindings.contributeProvidesBinding("org.pawelszymczyk.UserService", new UserServiceProvidesAdapter(module));
    bindings.contributeProvidesBinding("org.pawelszymczyk.UserRepository", new ProvideHeaterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.pawelszymczyk.UserService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.pawelszymczyk.UserService>} and handling creation and
   * preparation of object instances.
   */
  public static final class UserServiceProvidesAdapter extends ProvidesBinding<UserService>
      implements Provider<UserService> {
    private final MainModule module;

    public UserServiceProvidesAdapter(MainModule module) {
      super("org.pawelszymczyk.UserService", IS_SINGLETON, "org.pawelszymczyk.MainModule", "userService");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.pawelszymczyk.UserService>}.
     */
    @Override
    public UserService get() {
      return module.userService();
    }
  }

  /**
   * A {@code Binding<org.pawelszymczyk.UserRepository>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.pawelszymczyk.UserRepository>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHeaterProvidesAdapter extends ProvidesBinding<UserRepository>
      implements Provider<UserRepository> {
    private final MainModule module;

    public ProvideHeaterProvidesAdapter(MainModule module) {
      super("org.pawelszymczyk.UserRepository", IS_SINGLETON, "org.pawelszymczyk.MainModule", "provideHeater");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.pawelszymczyk.UserRepository>}.
     */
    @Override
    public UserRepository get() {
      return module.provideHeater();
    }
  }
}
